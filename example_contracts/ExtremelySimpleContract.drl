# Extremely Simple contract
# Even simpler than the Buyer-Seller scenario!
package ExtremelySimpleContract

# Import Java classes for EROP support
import uk.ac.ncl.erop.*;

# Global variables (that is, persistent objects passed from outside)
global RelevanceEngine engine;
global EventLogger logger;
global RolePlayer buyer;
global RolePlayer seller;
global ROPSet ropBuyer;
global ROPSet ropSeller;
global BusinessOperation purchaseOrder;
global BusinessOperation finePayment;

# Rule 0: initialize the ROP sets for buyer and seller.
# This rule is launched only when the contract is set up.
# In this simple scenario the seller has no ROP, but the buyer
# starts with the obligation to place an order within
# the 1st of November at 12:00:00.
rule "Initialization"
	when
		$e: Event (type == "init")
	then 
		# Add buyer's obligation to submit an order within 1/11/2008 12:00:00
		#ropBuyer.addObligation(new BusinessOperation("Purchase Order"), 
		#	"1/11/2008 12:00:00");
		# Add buyer's obligation to submit an order within 3 seconds
		ropBuyer.addObligation(purchaseOrder, seller, 3);
		System.out.println("Initialization rule triggered");
end

# Rule 1: triggers when a purchase order arrives *on time*.
# In this case, the pending obligation is removed.
rule "PO Received"
	when
		$e: Event (type == "Purchase Order", originator == "buyer", 
			status == "success")
		eval(ropBuyer.matchesObligations(purchaseOrder))
	then
		ropBuyer.removeObligation(purchaseOrder, seller);
		System.out.println("PO Received Rule triggered");
end

# Rule 2: triggers when the obligation to submit a purchase order is late
# (ie, the deadline expires). In this case the obligation to place a purchase
# order is replaced with the obligation to pay a fine.
rule "PO Late"
	when
		$e: Event (type == "Purchase Order Timeout", originator == "buyer")
		eval(ropBuyer.matchesObligations(purchaseOrder))
	then
		ropBuyer.removeObligation(purchaseOrder, seller);
		# Add buyer's obligation to pay fine within 2/11/2008 12:00:00
		#ropBuyer.addObligation(finePayment, "2/11/2008 12:00:00");
		
		# Add buyer's obligation to pay fine within 3 seconds
		ropBuyer.addObligation(finePayment, seller, 3);
		System.out.println("PO Late Rule triggered"); 
end

# Rule N: Triggers when an event is received, of any type (for debugging purposes)
rule "Any Event"
	when
		$e: Event ()
	then
		System.out.print("Catchall rule triggered - ");
		System.out.print("Event received of type "+$e.getType()+" from "+$e.getOriginator());
		System.out.println(" to "+$e.getResponder()+" with status "+$e.getStatus());
end

### Further rules would follow to deal with fine payment and other operations
 