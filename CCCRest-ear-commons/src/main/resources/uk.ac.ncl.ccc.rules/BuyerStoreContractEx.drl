package BuyerStoreContractEx

// Import Java classes for EROP support
import uk.ac.ncl.erop.*;
import uk.ac.ncl.ethereum.*;

import  uk.ac.ncl.logging.CCCLogger;
// Global variables (persistent objects passed from outside)
global RelevanceEngine engine;
global EventLogger logger;

global RolePlayer buyer;
global RolePlayer seller;
global ROPSet ropBuyer;
global ROPSet ropSeller;
global TimingMonitor timingMonitor;

global BusinessOperation buyRequest;
global BusinessOperation payment;
global BusinessOperation buyConfirm
global BusinessOperation buyReject;
global BusinessOperation cancelation;

global BlockChainOperation bcOperation;

global Responder responder;

global CCCLogger cccloger;

/* Rule 0: initialize the ROP sets for buyer and seller.
* This rule is launched only when the contract is set up.
* the buyer
* starts with the right to submit a buy request.  */

rule "Initialization"
	when
		$e: Event (type == "init")
	then
		System.out.println("* Initialization when");
		CCCLogger.logTrace("* Initialization when");
//		 Add buyer's right to submit an order
		ropBuyer.addRight(buyRequest, seller, (String)null);
		System.out.println("* Initialization rule triggered ");
		CCCLogger.logTrace("* Initialization rule triggered");
//		responder.setContractCompliant(false);
	System.out.println("CCC - Send ethereum send transaction event");
		bcOperation.sendBCEvent("bcEvent");
end

/* Rule 1: having received a Buy Request event from the buyer, his right to submit another
* is temporarily revoked until the current one is completed. The seller gains
* an obligation to either accept or reject the Buy Request. */

rule "Buy Request Received"
	when
//		 Verify type of event, originator, and responder
		$e: Event(type=="BUYREQ", originator=="buyer", responder=="store", status=="success")
		eval(ropBuyer.matchesRights(buyRequest))
	then
//		 Remove buyer's right to place other Buy Requests
		ropBuyer.removeRight(buyRequest, seller);
//		 Add seller's obligation to either accept or reject order
		BusinessOperation[] bos = {buyConfirm, buyReject};
		ropSeller.addObligation("React To Buy Request", bos, buyer, 60,2);
		System.out.println("* Buy Request Received rule triggered");
		CCCLogger.logTrace("* Buy Request Received rule triggered");

		responder.setContractCompliant(true);
		responder.setSequenceId($e.getSequenceId());
end

rule "Buy Request Business 1st Failure"
	when
		// Verify type of event, originator, and responder
		$e: Event(type=="BUYREQ", originator=="buyer", responder=="store", status=="tecfail")
		eval(ropBuyer.matchesRights(buyRequest) && buyRequest.getBusinessFailure()== false )

	then
		buyRequest.setBusinessFailure(true);

		System.out.println("* Buy Request Business Failure 1 rule triggered");
		CCCLogger.logTrace("* Buy Request Business Failure 1 rule triggered");
		responder.setContractCompliant(true);
		responder.setSequenceId($e.getSequenceId());
end

/*
rule "Buy Request Business 2nd Failure"
	when
		// Verify type of event, originator, and responder
		$e: Event(type=="BUYREQ", originator=="buyer", responder=="store", status=="tecfail")
		eval(ropBuyer.matchesRights(buyRequest) && buyRequest.getBusinessFailure()== true)

	then
		ropBuyer.reset();
		ropSeller.reset();
		System.out.println("* Buy Request Business Failure 2 rule triggered");
        CCCLogger.logTrace("* Buy Request Business Failure 2 rule triggered");
		responder.setContractCompliant(true);
        responder.setSequenceId($e.getSequenceId());
end
   */
/* Rule 2: having received a reject Buy Request event from the seller, the pending obligation
* is satisfied. Restore buyer's right to submit Buy Requests.
*/

rule "Buy Request Rejected"
	when
		$e: Event(type=="BUYREJ", originator=="store", responder=="buyer", status=="success")
		eval(ropSeller.matchesObligations("React To Buy Request"));
	then
		System.out.println("* Buy Rejection");
		CCCLogger.logTrace("* Buy Rejection");
		// Buyer's Obligation is satisfied, remove it
		ropSeller.removeObligation("React To Buy Request", buyer);
		System.out.println("* Buy Rejection");

		// Restore buyer's right to submit other Buy Requests
		//ropBuyer.addRight(buyRequest, seller, (String)null);
		System.out.println("* Buy Request Rejected rule triggered");
        CCCLogger.logTrace("* Buy Request Rejected rule triggered");
		responder.setContractCompliant(true);
        responder.setSequenceId($e.getSequenceId());
end

rule "Buy Request Rejected Business 1st Failure"
	when
		$e: Event(type=="BUYREJ", originator=="store", responder=="buyer", status=="tecfail")
		eval(ropSeller.matchesObligations("React To Buy Request") && buyReject.getBusinessFailure()==false)
	then
		buyReject.setBusinessFailure(true);
		System.out.println("* Buy Request Rejected Business 1st Failure rule triggered");
        CCCLogger.logTrace("* Buy Request Rejected Business 1st Failure rule triggered");
		responder.setContractCompliant(true);
        responder.setSequenceId($e.getSequenceId());
end

      /*
rule "Buy Request Rejected Business 2nd Failure"
	when
		$e: Event(type=="BUYREJ", originator=="store", responder=="buyer", status=="tecfail")
		eval(ropSeller.matchesObligations("React To Buy Request") && buyReject.getBusinessFailure()==true)
	then

		System.out.println("* Buy Request Rejected Business 2nd Failure rule triggered");
        CCCLogger.logTrace("* Buy Request Rejected Business 2nd Failure rule triggered");
		ropBuyer.reset();
		ropSeller.reset();
		responder.setContractCompliant(true);
        responder.setSequenceId($e.getSequenceId());
end
*/
/* Rule 3: having received an accept Buy Request event from the seller, the pending obligation
* is satisfied. New obligation on buyer to pay seller. */
rule "Buy Request Confirmation"
	when
		$e: Event(type=="BUYCONF", originator=="store", responder=="buyer", status=="success")
		eval(ropSeller.matchesObligations("React To Buy Request"));
	then
		// Buyer's Obligation is satisfied, remove it
		ropSeller.removeObligation("React To Buy Request", buyer);
		// Add new obligation for buyer to pay a bill to the seller within date!
		// 60 seconds, 2 min, 1 hour
		ropBuyer.addObligation(payment, seller, 60, 2, 1);
		ropBuyer.addRight(cancelation, seller, 60, 2, 1);
		System.out.println("* Buy Request Confirmation rule triggered");
        CCCLogger.logTrace("* Buy Request Confirmation rule triggered");
		responder.setContractCompliant(true);
        responder.setSequenceId($e.getSequenceId());
end

rule "Buy Request Confirmation 1st Business Failure"
	when
		$e: Event(type=="BUYCONF", originator=="store", responder=="buyer", status=="tecfail")
		eval(ropSeller.matchesObligations("React To Buy Request") && buyConfirm.getBusinessFailure()==false)
	then
		buyConfirm.setBusinessFailure(true);

		System.out.println("* Buy Request confirmation 1st Business Failure rule triggered");
        CCCLogger.logTrace("* Buy Request confirmation 1st Business Failure rule triggered");
		responder.setContractCompliant(true);
        responder.setSequenceId($e.getSequenceId());
end
/*
rule "Buy Request Confirmation 2nd Business Failure"
	when
		$e: Event(type=="BUYCONF", originator=="store", responder=="buyer", status=="tecfail")
		eval(ropSeller.matchesObligations("React To Buy Request") && buyConfirm.getBusinessFailure()==true)
	then

		System.out.println("* Buy Request confirmation 2nd Business Failure rule triggered");
        CCCLogger.logTrace("* Buy Request confirmation 2nd Business Failure rule triggered");
		ropBuyer.reset();
		ropSeller.reset();
		responder.setContractCompliant(true);
        responder.setSequenceId($e.getSequenceId());
end
   */
// Rule 5: buyer pays. Obligation satisfied, The buyer regains the right to submit Buy Requests.
rule "Payment Received"
	when
		$e: Event(type=="BUYPAY", originator=="buyer", responder=="store", status=="success")
		eval(ropBuyer.matchesObligations(payment))
	then
		// Buyer's Obligation is satisfied, remove it.
		ropBuyer.removeObligation(payment, seller);
		ropBuyer.removeRight(cancelation, seller);
		System.out.println("* Payment rule triggered");
        CCCLogger.logTrace("* Payment rule triggered");
		responder.setContractCompliant(true);
        responder.setSequenceId($e.getSequenceId());
end

rule "Payment 1st Business Failure"
	when
		$e: Event(type=="BUYPAY", originator=="buyer", responder=="store", status=="tecfail")
		eval(ropBuyer.matchesObligations(payment) && payment.getBusinessFailure()==false)
	then
		payment.setBusinessFailure(true);
		System.out.println("* Payment 1st Business Failure *");
        CCCLogger.logTrace("* Payment 1st Business Failure *");
		responder.setContractCompliant(true);
        responder.setSequenceId($e.getSequenceId());
end
/*
rule "Payment 2nd Business Failure"
	when
		$e: Event(type=="BUYPAY", originator=="buyer", responder=="store", status=="tecfail")
		eval(ropBuyer.matchesObligations(payment) && payment.getBusinessFailure()==true)
	then

		System.out.println("* Payment 2nd Business Failure");
        CCCLogger.logTrace("* Payment 2nd Business Failure");
		ropBuyer.reset();
		ropSeller.reset();

		responder.setContractCompliant(true);
        responder.setSequenceId($e.getSequenceId());
end
*/

rule "Buy cancelation"
	when
		$e: Event(type=="BUYCANC", originator=="buyer", responder=="store", status=="success")
		eval(ropBuyer.matchesRights(cancelation))
	then
		// Buyer's Obligation is satisfied, remove it.
		ropBuyer.removeRight(cancelation, seller);
		ropBuyer.removeObligation(payment, seller);

		System.out.println("matches right cancelation: " + ropBuyer.toString());
        CCCLogger.logTrace("matches right cancelation: " + ropBuyer.toString());
		System.out.println("* Buy cancelation rule triggered");
        CCCLogger.logTrace("* Buy cancelation rule triggered");
		responder.setContractCompliant(true);
        responder.setSequenceId($e.getSequenceId());
end

rule "Cancelation 1st Business Failure"
	when
		$e: Event(type=="BUYCANC", originator=="buyer", responder=="store", status=="tecfail")
		eval(ropBuyer.matchesRights(cancelation) && cancelation.getBusinessFailure()== false)
	then
		// Buyer's Obligation is satisfied, remove it.
		cancelation.setBusinessFailure(true);
		System.out.println("* Buy cancelation 1st Business Failure rule triggered");
        CCCLogger.logTrace("* Buy cancelation 1st Business Failure rule triggered");
		responder.setContractCompliant(true);
        responder.setSequenceId($e.getSequenceId());
end
/*
rule "Cancelation 2nd Business Failure"
	when
		$e: Event(type=="BUYCANC", originator=="buyer", responder=="store", status=="tecfail")
		eval(ropBuyer.matchesRights(cancelation) && cancelation.getBusinessFailure()== true)
	then
		// Buyer's Obligation is satisfied, remove it.

		System.out.println("* Buy cancelation 2nd Business Failure rule triggered");
        CCCLogger.logTrace("* Buy cancelation 2nd Business Failure rule triggered");
		ropBuyer.reset();
		ropSeller.reset();

		responder.setContractCompliant(true);
		responder.setSequenceId($e.getSequenceId());
end  */

// Rule: Reset state of CCC after last message of sequence
rule "Reset"

	when
		$e: Event(type=="reset")
		eval(!ropBuyer.matchesRights(cancelation))
	then
		System.out.println("* reset when");
        CCCLogger.logTrace("* reset when");


		ropBuyer.reset();
		ropSeller.reset();

		// clear business failures flag for each business operation
		buyRequest.setBusinessFailure(false);
		payment.setBusinessFailure(false);
	 	buyConfirm.setBusinessFailure(false);
		buyReject.setBusinessFailure(false);
		cancelation.setBusinessFailure(false);

		// Add buyer's right to submit an order
		ropBuyer.addRight(buyRequest, seller, (String)null);

		System.out.println("* Reset rule triggered");
        CCCLogger.logTrace("* Reset rule triggered");

		responder.setContractCompliant(true);
		responder.setSequenceId($e.getSequenceId());
end


